---

# Convert the floating IP id to an address for Terraform
- block:
    - name: Look up floating ip
      azimuth_cloud.terraform.os_floating_ip_info:
        floating_ip: "{{ cluster_floating_ip }}"
      register: cluster_floating_ip_info

    - name: Set floating IP address fact
      set_fact:
        cluster_floating_ip_address: "{{ cluster_floating_ip_info.floating_ip.floating_ip_address }}"
  when:
    - cluster_floating_ip is defined
    - cluster_floating_ip

- name: Install Terraform binary
  include_role:
    name: azimuth_cloud.terraform.install

- name: Make Terraform project directory
  file:
    path: "{{ terraform_project_path }}"
    state: directory

- name: Write backend type configuration
  copy:
    content: |
      terraform {
        backend "{{ terraform_backend_type }}" { }
      }
    dest: "{{ terraform_project_path }}/backend.tf"

- name: Write backend configuration options
  copy:
    content: "{{ terraform_backend_config | to_json }}"
    dest: "{{ terraform_project_path }}/backend_config.json"

- name: Template Terraform files into project directory
  template:
    src: "{{ item }}.j2"
    dest: "{{ terraform_project_path }}/{{ item }}"
  loop:
    - outputs.tf
    - providers.tf
    - resources.tf

- name: Find terraform outputs, just to initi tofu state
  azimuth_cloud.terraform.terraform_output:
    project_path: "{{ terraform_project_path }}"
    binary_path: "{{ terraform_binary_path }}"
    backend_config_files:
      - "{{ terraform_project_path }}/backend_config.json"
  when:
    - azimuth_update_reason is defined
    - azimuth_update_reason == 'patch'

- name: Terraform look at the current state list
  ansible.builtin.command: "{{ terraform_binary_path }} state list"
  args:
    chdir: "{{ terraform_project_path }}"
  when:
    - azimuth_update_reason is defined
    - azimuth_update_reason == 'patch'
  register: terraform_state_list

- name: Taint all servers if this is a patch update
  ansible.builtin.command: "{{ terraform_binary_path }} taint openstack_compute_instance_v2.cluster_server"
  args:
    chdir: "{{ terraform_project_path }}"
  with_items: "{{ terraform_state_list.stdout_lines }}"
  when:
    - azimuth_update_reason is defined
    - azimuth_update_reason == 'patch'
    - item is match("openstack_compute_instance_v2..*")

- name: Provision infrastructure
  community.general.terraform:
    binary_path: "{{ terraform_binary_path }}"
    project_path: "{{ terraform_project_path }}"
    state: "{{ terraform_state }}"
    backend_config_files:
      - "{{ terraform_project_path }}/backend_config.json"
    force_init: yes
    init_reconfigure: yes
